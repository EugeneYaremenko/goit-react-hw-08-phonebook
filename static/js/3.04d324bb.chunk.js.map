{"version":3,"sources":["components/ContactList/contactList.module.css","components/ContactList/fade.module.css","components/Section/section.module.css","components/Section/fade.module.css","components/ContactForm/contactForm.module.css","components/Filter/filter.module.css","components/Filter/fade.module.css","components/Section/Section.js","redux/contacts/contactsOperations.js","components/ContactForm/ContactForm.js","redux/contacts/contacts-selectors.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","views/ContactsView.js"],"names":["module","exports","Section","title","children","className","styles","section","CSSTransition","in","appear","classNames","fadeStyles","timeout","axios","defaults","baseURL","addContact","name","number","dispatch","getState","contactExist","contacts","items","find","contact","contactsActions","addContactRequest","viewDobleContactError","post","then","response","addContactSuccess","data","catch","error","addContactError","fetchContact","fetchContactsRequest","get","fetchContactsSuccess","fetchContactsError","removeContact","id","removeContactsRequest","delete","removeContactsSuccess","removeContactsError","ContactForm","state","handleNameChange","e","setState","target","value","handleNumberChange","handleSubmit","preventDefault","props","handleAddContact","this","onSubmit","form","label","type","onChange","Button","variant","color","Component","mapDispatchToProps","contactsOperations","connect","getContacts","getFilter","filter","getLoading","loading","getVisibleContact","createSelector","toLowerCase","includes","getContactById","contactId","item","ownProps","contactsSelectors","onRemoveContact","listItem","deleteBtn","onClick","TransitionGroup","component","list","map","key","fade","onChangeFilter","changeFilter","ContactsView","onFetchContacts","isLoadingContacts","length","Spinner","contactListFade"],"mappings":"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","file":"static/js/3.04d324bb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"contactList_list__3PikA\",\"listItem\":\"contactList_listItem__DmhXP\",\"deleteBtn\":\"contactList_deleteBtn__2TNGM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"fade_enter__u6HB7\",\"enterActive\":\"fade_enterActive__1f2vy\",\"exit\":\"fade_exit__1bBzs\",\"exitActive\":\"fade_exitActive__1xgDh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"section_section__3mnsH\",\"title\":\"section_title__P9o5b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appear\":\"fade_appear__AnJ-m\",\"appearActive\":\"fade_appearActive__3XR4z\",\"appearExit\":\"fade_appearExit__2M4dF\",\"appearExitActive\":\"fade_appearExitActive__BfmgG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"contactForm_form___Fk9p\",\"label\":\"contactForm_label__10z32\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"filter_filter__sbDr1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"fade_enter__1EKnD\",\"enterActive\":\"fade_enterActive__3LJY9\",\"exit\":\"fade_exit__3KA7t\",\"exitActive\":\"fade_exitActive__3jvvw\"};","import React from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './section.module.css';\r\nimport fadeStyles from './fade.module.css';\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <section className={styles.section}>\r\n      <CSSTransition in={true} appear={true} classNames={fadeStyles} timeout={500}>\r\n        <h2 className={styles.title}>{title}</h2>\r\n      </CSSTransition>\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Section;\r\n","import axios from 'axios';\r\nimport contactsActions from './contactsActions';\r\n\r\naxios.defaults.baseURL = 'https://goit-phonebook-api.herokuapp.com';\r\n\r\nconst addContact = (name, number) => (dispatch, getState) => {\r\n  const contacts = getState().contacts.items;\r\n\r\n  const contactExist = contacts.find(contact => contact.name === name);\r\n\r\n  dispatch(contactsActions.addContactRequest());\r\n\r\n  if (contactExist) {\r\n    dispatch(contactsActions.viewDobleContactError());\r\n    return;\r\n  }\r\n\r\n  axios\r\n    .post('/contacts', { name, number })\r\n    .then(response => {\r\n      dispatch(contactsActions.addContactSuccess(response.data));\r\n    })\r\n    .catch(error => dispatch(contactsActions.addContactError(error)));\r\n};\r\n\r\nconst fetchContact = () => dispatch => {\r\n  dispatch(contactsActions.fetchContactsRequest());\r\n\r\n  axios\r\n    .get('/contacts')\r\n    .then(response => {\r\n      dispatch(contactsActions.fetchContactsSuccess(response.data));\r\n    })\r\n    .catch(error => dispatch(contactsActions.fetchContactsError(error)));\r\n};\r\n\r\nconst removeContact = id => dispatch => {\r\n  dispatch(contactsActions.removeContactsRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(contactsActions.removeContactsSuccess(id)))\r\n    .catch(error => dispatch(contactsActions.removeContactsError(error)));\r\n};\r\n\r\nexport default {\r\n  addContact,\r\n  fetchContact,\r\n  removeContact,\r\n};\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n/* import contactsActions from '../../redux/contacts/contactsActions'; */\r\nimport contactsOperations from '../../redux/contacts/contactsOperations';\r\nimport { Button } from '@material-ui/core';\r\nimport styles from './contactForm.module.css';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  handleNameChange = e => {\r\n    this.setState({ name: e.target.value });\r\n  };\r\n\r\n  handleNumberChange = e => {\r\n    this.setState({ number: e.target.value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    const { name, number } = this.state;\r\n\r\n    e.preventDefault();\r\n\r\n    this.props.handleAddContact(name, number);\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n\r\n    return (\r\n      <form onSubmit={this.handleSubmit} className={styles.form}>\r\n        <label className={styles.label}>\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            value={name}\r\n            onChange={this.handleNameChange}\r\n          ></input>\r\n        </label>\r\n\r\n        <label className={styles.label}>\r\n          Number\r\n          <input\r\n            type=\"number\"\r\n            value={number}\r\n            onChange={this.handleNumberChange}\r\n          ></input>\r\n        </label>\r\n\r\n        <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n          Add contact\r\n        </Button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  handleAddContact: contactsOperations.addContact,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getContacts = state => state.contacts.items;\r\nconst getFilter = state => state.contacts.filter;\r\nconst getLoading = state => state.contacts.loading;\r\n\r\nconst getVisibleContact = createSelector(\r\n  [getContacts, getFilter],\r\n  (items, filter) =>\r\n    items.filter(contact =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n    ),\r\n);\r\n\r\nconst getContactById = createSelector(\r\n  [(state, contactId) => contactId, getContacts],\r\n  (contactId, contacts) => contacts.find(item => item.id === contactId),\r\n);\r\n\r\nexport default { getContacts, getLoading, getFilter, getVisibleContact, getContactById };\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport styles from '../ContactList/contactList.module.css';\r\n/* import contactsActions from '../../redux/contacts/contactsActions'; */\r\nimport contactsOperations from '../../redux/contacts/contactsOperations';\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\r\n\r\nconst ContactListItem = ({ name, number, onRemoveContact }) => {\r\n  return (\r\n    <li className={styles.listItem}>\r\n      <div>\r\n        {name}: {number}\r\n      </div>\r\n      <button\r\n        className={styles.deleteBtn}\r\n        type=\"button\"\r\n        onClick={onRemoveContact}\r\n      >\r\n        Delete\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  const item = contactsSelectors.getContactById(state, ownProps.id);\r\n\r\n  return { ...item };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n  onRemoveContact: () =>\r\n    dispatch(contactsOperations.removeContact(ownProps.id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactListItem);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './contactList.module.css';\r\nimport fade from './fade.module.css';\r\nimport ContactListItem from '../ContactListItem/ContactListItem';\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\r\n\r\nconst ContactList = ({ contacts }) => {\r\n  return (\r\n    <TransitionGroup component=\"ul\" className={styles.list}>\r\n      {contacts.map(({ id }) => (\r\n        <CSSTransition key={id} timeout={250} classNames={fade}>\r\n          <ContactListItem key={id} id={id} />\r\n        </CSSTransition>\r\n      ))}\r\n    </TransitionGroup>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string,\r\n      number: PropTypes.string,\r\n    }),\r\n  ),\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: contactsSelectors.getVisibleContact(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(ContactList);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/contactsActions';\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './filter.module.css';\r\nimport fade from './fade.module.css';\r\n\r\nconst Filter = ({ value, onChangeFilter }) => {\r\n  return (\r\n    <CSSTransition in={true} timeout={250} classNames={fade}>\r\n      <div className={styles.filter}>\r\n        <p>Find contacts by name</p>\r\n        <input\r\n          type=\"text\"\r\n          value={value}\r\n          onChange={e => onChangeFilter(e.target.value)}\r\n        />\r\n      </div>\r\n    </CSSTransition>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChangeFilter: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  value: contactsSelectors.getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onChangeFilter: contactsActions.changeFilter,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nimport Section from '../components/Section/Section';\r\n\r\nimport ContactForm from '../components/ContactForm/ContactForm';\r\nimport ContactList from '../components/ContactList/ContactList';\r\nimport Filter from '../components/Filter/Filter';\r\nimport Spinner from '../components/Spinner/Spinner';\r\n\r\nimport contactsOperations from '../redux/contacts/contactsOperations';\r\nimport contactsSelectors from '../redux/contacts/contacts-selectors';\r\n\r\nimport contactListFade from '../components/ContactList/fade.module.css';\r\n\r\nclass ContactsView extends Component {\r\n  componentDidMount() {\r\n    this.props.onFetchContacts();\r\n  }\r\n\r\n  render() {\r\n    const { contacts, isLoadingContacts } = this.props;\r\n\r\n    return (\r\n      <>\r\n        <Section title=\"Phonebook\">\r\n          <ContactForm />\r\n        </Section>\r\n\r\n        <Section title=\"Contacts\">\r\n          {contacts.length > 1 && <Filter />}\r\n\r\n          {isLoadingContacts && <Spinner />}\r\n        </Section>\r\n\r\n        <CSSTransition timeout={250} classNames={contactListFade}>\r\n          <ContactList />\r\n        </CSSTransition>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToPrors = state => ({\r\n  isLoadingContacts: contactsSelectors.getLoading(state),\r\n  contacts: contactsSelectors.getContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onFetchContacts: contactsOperations.fetchContact,\r\n};\r\n\r\nexport default connect(mapStateToPrors, mapDispatchToProps)(ContactsView);\r\n"],"sourceRoot":""}